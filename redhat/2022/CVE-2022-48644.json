{
  "affected_release": null,
  "package_state": [
    {
      "product_name": "Red Hat Enterprise Linux 6",
      "fix_state": "Not affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:6"
    },
    {
      "product_name": "Red Hat Enterprise Linux 7",
      "fix_state": "Not affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:7"
    },
    {
      "product_name": "Red Hat Enterprise Linux 7",
      "fix_state": "Not affected",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:7"
    },
    {
      "product_name": "Red Hat Enterprise Linux 8",
      "fix_state": "Not affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:8"
    },
    {
      "product_name": "Red Hat Enterprise Linux 8",
      "fix_state": "Not affected",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:8"
    },
    {
      "product_name": "Red Hat Enterprise Linux 9",
      "fix_state": "Affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:9"
    },
    {
      "product_name": "Red Hat Enterprise Linux 9",
      "fix_state": "Affected",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:9"
    }
  ],
  "threat_severity": "Moderate",
  "public_date": "2024-04-28T00:00:00Z",
  "bugzilla": {
    "description": "kernel: net/sched: taprio: avoid disabling offload when it was never enabled",
    "id": "2277819",
    "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2277819"
  },
  "cvss": {
    "cvss_base_score": "",
    "cvss_scoring_vector": "",
    "status": ""
  },
  "cvss3": {
    "cvss3_base_score": "5.5",
    "cvss3_scoring_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
    "status": "draft"
  },
  "iava": "",
  "cwe": "",
  "statement": "",
  "acknowledgement": "",
  "name": "CVE-2022-48644",
  "document_distribution": "",
  "details": [
    "In the Linux kernel, the following vulnerability has been resolved:\nnet/sched: taprio: avoid disabling offload when it was never enabled\nIn an incredibly strange API design decision, qdisc-\u003edestroy() gets\ncalled even if qdisc-\u003einit() never succeeded, not exclusively since\ncommit 87b60cfacf9f (\"net_sched: fix error recovery at qdisc creation\"),\nbut apparently also earlier (in the case of qdisc_create_dflt()).\nThe taprio qdisc does not fully acknowledge this when it attempts full\noffload, because it starts off with q-\u003eflags = TAPRIO_FLAGS_INVALID in\ntaprio_init(), then it replaces q-\u003eflags with TCA_TAPRIO_ATTR_FLAGS\nparsed from netlink (in taprio_change(), tail called from taprio_init()).\nBut in taprio_destroy(), we call taprio_disable_offload(), and this\ndetermines what to do based on FULL_OFFLOAD_IS_ENABLED(q-\u003eflags).\nBut looking at the implementation of FULL_OFFLOAD_IS_ENABLED()\n(a bitwise check of bit 1 in q-\u003eflags), it is invalid to call this macro\non q-\u003eflags when it contains TAPRIO_FLAGS_INVALID, because that is set\nto U32_MAX, and therefore FULL_OFFLOAD_IS_ENABLED() will return true on\nan invalid set of flags.\nAs a result, it is possible to crash the kernel if user space forces an\nerror between setting q-\u003eflags = TAPRIO_FLAGS_INVALID, and the calling\nof taprio_enable_offload(). This is because drivers do not expect the\noffload to be disabled when it was never enabled.\nThe error that we force here is to attach taprio as a non-root qdisc,\nbut instead as child of an mqprio root qdisc:\n$ tc qdisc add dev swp0 root handle 1: \\\nmqprio num_tc 8 map 0 1 2 3 4 5 6 7 \\\nqueues 1@0 1@1 1@2 1@3 1@4 1@5 1@6 1@7 hw 0\n$ tc qdisc replace dev swp0 parent 1:1 \\\ntaprio num_tc 8 map 0 1 2 3 4 5 6 7 \\\nqueues 1@0 1@1 1@2 1@3 1@4 1@5 1@6 1@7 base-time 0 \\\nsched-entry S 0x7f 990000 sched-entry S 0x80 100000 \\\nflags 0x0 clockid CLOCK_TAI\nUnable to handle kernel paging request at virtual address fffffffffffffff8\n[fffffffffffffff8] pgd=0000000000000000, p4d=0000000000000000\nInternal error: Oops: 96000004 [#1] PREEMPT SMP\nCall trace:\ntaprio_dump+0x27c/0x310\nvsc9959_port_setup_tc+0x1f4/0x460\nfelix_port_setup_tc+0x24/0x3c\ndsa_slave_setup_tc+0x54/0x27c\ntaprio_disable_offload.isra.0+0x58/0xe0\ntaprio_destroy+0x80/0x104\nqdisc_create+0x240/0x470\ntc_modify_qdisc+0x1fc/0x6b0\nrtnetlink_rcv_msg+0x12c/0x390\nnetlink_rcv_skb+0x5c/0x130\nrtnetlink_rcv+0x1c/0x2c\nFix this by keeping track of the operations we made, and undo the\noffload only if we actually did it.\nI've added \"bool offloaded\" inside a 4 byte hole between \"int clockid\"\nand \"atomic64_t picos_per_byte\". Now the first cache line looks like\nbelow:\n$ pahole -C taprio_sched net/sched/sch_taprio.o\nstruct taprio_sched {\nstruct Qdisc * *           qdiscs;               /*     0     8 */\nstruct Qdisc *             root;                 /*     8     8 */\nu32                        flags;                /*    16     4 */\nenum tk_offsets            tk_offset;            /*    20     4 */\nint                        clockid;              /*    24     4 */\nbool                       offloaded;            /*    28     1 */\n/* XXX 3 bytes hole, try to pack */\natomic64_t                 picos_per_byte;       /*    32     0 */\n/* XXX 8 bytes hole, try to pack */\nspinlock_t                 current_entry_lock;   /*    40     0 */\n/* XXX 8 bytes hole, try to pack */\nstruct sched_entry *       current_entry;        /*    48     8 */\nstruct sched_gate_list *   oper_sched;           /*    56     8 */\n/* --- cacheline 1 boundary (64 bytes) --- */"
  ],
  "references": [
    "https://www.cve.org/CVERecord?id=CVE-2022-48644\nhttps://nvd.nist.gov/vuln/detail/CVE-2022-48644\nhttps://lore.kernel.org/linux-cve-announce/2024042856-CVE-2022-48644-757e@gregkh/T"
  ]
}