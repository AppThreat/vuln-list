{
  "affected_release": null,
  "package_state": [
    {
      "product_name": "Red Hat Enterprise Linux 6",
      "fix_state": "Not affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:6"
    },
    {
      "product_name": "Red Hat Enterprise Linux 7",
      "fix_state": "Out of support scope",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:7"
    },
    {
      "product_name": "Red Hat Enterprise Linux 7",
      "fix_state": "Out of support scope",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:7"
    },
    {
      "product_name": "Red Hat Enterprise Linux 8",
      "fix_state": "Affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:8"
    },
    {
      "product_name": "Red Hat Enterprise Linux 8",
      "fix_state": "Affected",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:8"
    },
    {
      "product_name": "Red Hat Enterprise Linux 9",
      "fix_state": "Affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:9"
    },
    {
      "product_name": "Red Hat Enterprise Linux 9",
      "fix_state": "Affected",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:9"
    }
  ],
  "threat_severity": "Moderate",
  "public_date": "2024-06-20T00:00:00Z",
  "bugzilla": {
    "description": "kernel: net/mlx5e: Avoid field-overflowing memcpy()",
    "id": "2293315",
    "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2293315"
  },
  "cvss": {
    "cvss_base_score": "",
    "cvss_scoring_vector": "",
    "status": ""
  },
  "cvss3": {
    "cvss3_base_score": "5.5",
    "cvss3_scoring_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
    "status": "draft"
  },
  "iava": "",
  "cwe": "",
  "statement": "",
  "acknowledgement": "",
  "name": "CVE-2022-48744",
  "document_distribution": "",
  "details": [
    "In the Linux kernel, the following vulnerability has been resolved:\nnet/mlx5e: Avoid field-overflowing memcpy()\nIn preparation for FORTIFY_SOURCE performing compile-time and run-time\nfield bounds checking for memcpy(), memmove(), and memset(), avoid\nintentionally writing across neighboring fields.\nUse flexible arrays instead of zero-element arrays (which look like they\nare always overflowing) and split the cross-field memcpy() into two halves\nthat can be appropriately bounds-checked by the compiler.\nWe were doing:\n#define ETH_HLEN  14\n#define VLAN_HLEN  4\n...\n#define MLX5E_XDP_MIN_INLINE (ETH_HLEN + VLAN_HLEN)\n...\nstruct mlx5e_tx_wqe      *wqe  = mlx5_wq_cyc_get_wqe(wq, pi);\n...\nstruct mlx5_wqe_eth_seg  *eseg = \u0026wqe-\u003eeth;\nstruct mlx5_wqe_data_seg *dseg = wqe-\u003edata;\n...\nmemcpy(eseg-\u003einline_hdr.start, xdptxd-\u003edata, MLX5E_XDP_MIN_INLINE);\ntarget is wqe-\u003eeth.inline_hdr.start (which the compiler sees as being\n2 bytes in size), but copying 18, intending to write across start\n(really vlan_tci, 2 bytes). The remaining 16 bytes get written into\nwqe-\u003edata[0], covering byte_count (4 bytes), lkey (4 bytes), and addr\n(8 bytes).\nstruct mlx5e_tx_wqe {\nstruct mlx5_wqe_ctrl_seg   ctrl;                 /*     0    16 */\nstruct mlx5_wqe_eth_seg    eth;                  /*    16    16 */\nstruct mlx5_wqe_data_seg   data[];               /*    32     0 */\n/* size: 32, cachelines: 1, members: 3 */\n/* last cacheline: 32 bytes */\n};\nstruct mlx5_wqe_eth_seg {\nu8                         swp_outer_l4_offset;  /*     0     1 */\nu8                         swp_outer_l3_offset;  /*     1     1 */\nu8                         swp_inner_l4_offset;  /*     2     1 */\nu8                         swp_inner_l3_offset;  /*     3     1 */\nu8                         cs_flags;             /*     4     1 */\nu8                         swp_flags;            /*     5     1 */\n__be16                     mss;                  /*     6     2 */\n__be32                     flow_table_metadata;  /*     8     4 */\nunion {\nstruct {\n__be16     sz;                   /*    12     2 */\nu8         start[2];             /*    14     2 */\n} inline_hdr;                            /*    12     4 */\nstruct {\n__be16     type;                 /*    12     2 */\n__be16     vlan_tci;             /*    14     2 */\n} insert;                                /*    12     4 */\n__be32             trailer;              /*    12     4 */\n};                                               /*    12     4 */\n/* size: 16, cachelines: 1, members: 9 */\n/* last cacheline: 16 bytes */\n};\nstruct mlx5_wqe_data_seg {\n__be32                     byte_count;           /*     0     4 */\n__be32                     lkey;                 /*     4     4 */\n__be64                     addr;                 /*     8     8 */\n/* size: 16, cachelines: 1, members: 3 */\n/* last cacheline: 16 bytes */\n};\nSo, split the memcpy() so the compiler can reason about the buffer\nsizes.\n\"pahole\" shows no size nor member offset changes to struct mlx5e_tx_wqe\nnor struct mlx5e_umr_wqe. \"objdump -d\" shows no meaningful object\ncode changes (i.e. only source line number induced differences and\noptimizations)."
  ],
  "references": [
    "https://www.cve.org/CVERecord?id=CVE-2022-48744\nhttps://nvd.nist.gov/vuln/detail/CVE-2022-48744\nhttps://lore.kernel.org/linux-cve-announce/2024062003-CVE-2022-48744-0f03@gregkh/T"
  ]
}