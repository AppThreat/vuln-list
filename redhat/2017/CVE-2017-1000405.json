{
  "mitigation": "Disabling the use of zero page:\nIt is possible to prevent the zero page from being mapped as a huge page, by modifying a configuration tunable in the /sys directory as shown below.  This prevents the flaw from being exercised in this method.\n#  echo 0 \u003e /sys/kernel/mm/transparent_hugepage/use_zero_page\nDisabling huge pages:\nIt is possible to mitigate this flaw by disabling hugepages on a system.  Some user applications may require hugepages to be performant, and may suffer a performance penalty when running without hugepages.\nRed Hat has existing solutions created instructing how to disable transparent\nHow to disable transparent hugepages (THP) on Red Hat Enterprise Linux 7\nhttps://access.redhat.com/solutions/1320153\nIf your application may require transparent huge pages, please consult your software vendor to confirm.",
  "affected_release": [
    {
      "product_name": "Red Hat Enterprise Linux 7",
      "release_date": "2018-01-25T00:00:00Z",
      "advisory": "RHSA-2018:0180",
      "package": "kernel-alt-0:4.11.0-44.4.1.el7a",
      "cpe": "cpe:/o:redhat:enterprise_linux:7"
    }
  ],
  "package_state": [
    {
      "product_name": "Red Hat Enterprise Linux 5",
      "fix_state": "Not affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:5"
    },
    {
      "product_name": "Red Hat Enterprise Linux 6",
      "fix_state": "Not affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:6"
    },
    {
      "product_name": "Red Hat Enterprise Linux 7",
      "fix_state": "Not affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:7"
    },
    {
      "product_name": "Red Hat Enterprise Linux 7",
      "fix_state": "Not affected",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:7"
    },
    {
      "product_name": "Red Hat Enterprise MRG 2",
      "fix_state": "Not affected",
      "package_name": "realtime-kernel",
      "cpe": "cpe:/a:redhat:enterprise_mrg:2"
    }
  ],
  "threat_severity": "Important",
  "public_date": "2017-11-30T00:00:00Z",
  "bugzilla": {
    "description": "kernel: pmd can become dirty without going through a COW cycle",
    "id": "1516514",
    "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1516514"
  },
  "cvss": {
    "cvss_base_score": "",
    "cvss_scoring_vector": "",
    "status": ""
  },
  "cvss3": {
    "cvss3_base_score": "6.1",
    "cvss3_scoring_vector": "CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:H/A:L",
    "status": "verified"
  },
  "iava": "",
  "cwe": "CWE-362",
  "statement": "From the initial flaw description released, this issue does not affect the Linux kernel packages as shipped with Red Hat Enterprise Linux 5, 6, 7 and Red Hat Enterprise MRG 2.  They do not contain the upstream commit (8310d48b125d19fcd9521d83b8293e63eb1646aa) which allows the race condition.\nThis issue affects the Linux kernel packages as shipped with Red Hat Enterprise Linux 7 for ARM and Red Hat Enterprise Linux for Power LE.\nFuture Linux kernel updates for the respective releases may address this issue.\nFor further information please refer to the vulnerability article in the Customer Portal: https://access.redhat.com/security/vulnerabilities/3253921",
  "acknowledgement": "Red Hat would like to thank Daniel Shapiro and Eylon Ben Yaakov for reporting this issue.",
  "name": "CVE-2017-1000405",
  "document_distribution": "",
  "details": [
    "The Linux Kernel versions 2.6.38 through 4.14 have a problematic use of pmd_mkdirty() in the touch_pmd() function inside the THP implementation. touch_pmd() can be reached by get_user_pages(). In such case, the pmd will become dirty. This scenario breaks the new can_follow_write_pmd()'s logic - pmd can become dirty without going through a COW cycle. This bug is not as severe as the original \"Dirty cow\" because an ext4 file (or any other regular file) cannot be mapped using THP. Nevertheless, it does allow us to overwrite read-only huge pages. For example, the zero huge page and sealed shmem files can be overwritten (since their mapping can be populated using THP). Note that after the first write page-fault to the zero page, it will be replaced with a new fresh (and zeroed) thp.",
    "A flaw was found in the patches used to fix the 'dirtycow' vulnerability (CVE-2016-5195). An attacker, able to run local code, can exploit a race condition in transparent huge pages to modify usually read-only huge pages."
  ],
  "references": [
    "https://www.cve.org/CVERecord?id=CVE-2017-1000405\nhttps://nvd.nist.gov/vuln/detail/CVE-2017-1000405"
  ]
}