{
  "affected_release": null,
  "package_state": [
    {
      "product_name": "Red Hat Enterprise Linux 6",
      "fix_state": "Out of support scope",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:6"
    },
    {
      "product_name": "Red Hat Enterprise Linux 7",
      "fix_state": "Out of support scope",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:7"
    },
    {
      "product_name": "Red Hat Enterprise Linux 7",
      "fix_state": "Out of support scope",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:7"
    },
    {
      "product_name": "Red Hat Enterprise Linux 8",
      "fix_state": "Not affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:8"
    },
    {
      "product_name": "Red Hat Enterprise Linux 8",
      "fix_state": "Not affected",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:8"
    },
    {
      "product_name": "Red Hat Enterprise Linux 9",
      "fix_state": "Not affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:9"
    },
    {
      "product_name": "Red Hat Enterprise Linux 9",
      "fix_state": "Not affected",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:9"
    }
  ],
  "threat_severity": "Moderate",
  "public_date": "2024-06-25T00:00:00Z",
  "bugzilla": {
    "description": "kernel: btrfs: fix crash on racing fsync and size-extending write into prealloc",
    "id": "2294279",
    "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2294279"
  },
  "cvss": {
    "cvss_base_score": "",
    "cvss_scoring_vector": "",
    "status": ""
  },
  "cvss3": {
    "cvss3_base_score": "5.5",
    "cvss3_scoring_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
    "status": "draft"
  },
  "iava": "",
  "cwe": "",
  "statement": "",
  "acknowledgement": "",
  "name": "CVE-2024-37354",
  "document_distribution": "",
  "details": [
    "In the Linux kernel, the following vulnerability has been resolved:\nbtrfs: fix crash on racing fsync and size-extending write into prealloc\nWe have been seeing crashes on duplicate keys in\nbtrfs_set_item_key_safe():\nBTRFS critical (device vdb): slot 4 key (450 108 8192) new key (450 108 8192)\n------------[ cut here ]------------\nkernel BUG at fs/btrfs/ctree.c:2620!\ninvalid opcode: 0000 [#1] PREEMPT SMP PTI\nCPU: 0 PID: 3139 Comm: xfs_io Kdump: loaded Not tainted 6.9.0 #6\nHardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.16.3-2.fc40 04/01/2014\nRIP: 0010:btrfs_set_item_key_safe+0x11f/0x290 [btrfs]\nWith the following stack trace:\n#0  btrfs_set_item_key_safe (fs/btrfs/ctree.c:2620:4)\n#1  btrfs_drop_extents (fs/btrfs/file.c:411:4)\n#2  log_one_extent (fs/btrfs/tree-log.c:4732:9)\n#3  btrfs_log_changed_extents (fs/btrfs/tree-log.c:4955:9)\n#4  btrfs_log_inode (fs/btrfs/tree-log.c:6626:9)\n#5  btrfs_log_inode_parent (fs/btrfs/tree-log.c:7070:8)\n#6  btrfs_log_dentry_safe (fs/btrfs/tree-log.c:7171:8)\n#7  btrfs_sync_file (fs/btrfs/file.c:1933:8)\n#8  vfs_fsync_range (fs/sync.c:188:9)\n#9  vfs_fsync (fs/sync.c:202:9)\n#10 do_fsync (fs/sync.c:212:9)\n#11 __do_sys_fdatasync (fs/sync.c:225:9)\n#12 __se_sys_fdatasync (fs/sync.c:223:1)\n#13 __x64_sys_fdatasync (fs/sync.c:223:1)\n#14 do_syscall_x64 (arch/x86/entry/common.c:52:14)\n#15 do_syscall_64 (arch/x86/entry/common.c:83:7)\n#16 entry_SYSCALL_64+0xaf/0x14c (arch/x86/entry/entry_64.S:121)\nSo we're logging a changed extent from fsync, which is splitting an\nextent in the log tree. But this split part already exists in the tree,\ntriggering the BUG().\nThis is the state of the log tree at the time of the crash, dumped with\ndrgn (https://github.com/osandov/drgn/blob/main/contrib/btrfs_tree.py)\nto get more details than btrfs_print_leaf() gives us:\n\u003e\u003e\u003e print_extent_buffer(prog.crashed_thread().stack_trace()[0][\"eb\"])\nleaf 33439744 level 0 items 72 generation 9 owner 18446744073709551610\nleaf 33439744 flags 0x100000000000000\nfs uuid e5bd3946-400c-4223-8923-190ef1f18677\nchunk uuid d58cb17e-6d02-494a-829a-18b7d8a399da\nitem 0 key (450 INODE_ITEM 0) itemoff 16123 itemsize 160\ngeneration 7 transid 9 size 8192 nbytes 8473563889606862198\nblock group 0 mode 100600 links 1 uid 0 gid 0 rdev 0\nsequence 204 flags 0x10(PREALLOC)\natime 1716417703.220000000 (2024-05-22 15:41:43)\nctime 1716417704.983333333 (2024-05-22 15:41:44)\nmtime 1716417704.983333333 (2024-05-22 15:41:44)\notime 17592186044416.000000000 (559444-03-08 01:40:16)\nitem 1 key (450 INODE_REF 256) itemoff 16110 itemsize 13\nindex 195 namelen 3 name: 193\nitem 2 key (450 XATTR_ITEM 1640047104) itemoff 16073 itemsize 37\nlocation key (0 UNKNOWN.0 0) type XATTR\ntransid 7 data_len 1 name_len 6\nname: user.a\ndata a\nitem 3 key (450 EXTENT_DATA 0) itemoff 16020 itemsize 53\ngeneration 9 type 1 (regular)\nextent data disk byte 303144960 nr 12288\nextent data offset 0 nr 4096 ram 12288\nextent compression 0 (none)\nitem 4 key (450 EXTENT_DATA 4096) itemoff 15967 itemsize 53\ngeneration 9 type 2 (prealloc)\nprealloc data disk byte 303144960 nr 12288\nprealloc data offset 4096 nr 8192\nitem 5 key (450 EXTENT_DATA 8192) itemoff 15914 itemsize 53\ngeneration 9 type 2 (prealloc)\nprealloc data disk byte 303144960 nr 12288\nprealloc data offset 8192 nr 4096\n...\nSo the real problem happened earlier: notice that items 4 (4k-12k) and 5\n(8k-12k) overlap. Both are prealloc extents. Item 4 straddles i_size and\nitem 5 starts at i_size.\nHere is the state of \n---truncated---"
  ],
  "references": [
    "https://www.cve.org/CVERecord?id=CVE-2024-37354\nhttps://nvd.nist.gov/vuln/detail/CVE-2024-37354\nhttps://lore.kernel.org/linux-cve-announce/2024062547-CVE-2024-37354-ccfb@gregkh/T"
  ]
}