{
  "mitigation": "Mitigation for this issue is either not available or the currently available options don't meet the Red Hat Product Security criteria comprising ease of use and deployment, applicability to widespread installation base or stability.",
  "affected_release": null,
  "package_state": [
    {
      "product_name": "Red Hat Developer Tools",
      "fix_state": "Affected",
      "package_name": "llvm-toolset-15.0-llvm",
      "cpe": "cpe:/a:redhat:devtools:"
    },
    {
      "product_name": "Red Hat Enterprise Linux 8",
      "fix_state": "Affected",
      "package_name": "llvm-toolset:rhel8/llvm",
      "cpe": "cpe:/o:redhat:enterprise_linux:8"
    },
    {
      "product_name": "Red Hat Enterprise Linux 9",
      "fix_state": "Affected",
      "package_name": "llvm",
      "cpe": "cpe:/o:redhat:enterprise_linux:9"
    }
  ],
  "threat_severity": "Moderate",
  "public_date": "2024-04-05T00:00:00Z",
  "bugzilla": {
    "description": "llvm: LR register can be overwritten without data being saved to the stack on ARM",
    "id": "2273715",
    "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2273715"
  },
  "cvss": {
    "cvss_base_score": "",
    "cvss_scoring_vector": "",
    "status": ""
  },
  "cvss3": {
    "cvss3_base_score": "4.2",
    "cvss3_scoring_vector": "CVSS:3.1/AV:L/AC:H/PR:L/UI:R/S:U/C:L/I:L/A:L",
    "status": "draft"
  },
  "iava": "",
  "cwe": "CWE-440",
  "statement": "The vulnerability in LLVM, where the Link Register (LR) in ARM architecture can be overwritten without proper stack preservation, is assessed as a moderate severity issue. While overwriting the LR can lead to control-flow manipulation and potential code execution, its impact is mitigated by several factors. Firstly, successful exploitation requires precise knowledge of the target system's memory layout and execution context, making it less straightforward for attackers. Secondly, modern operating systems and runtime environments often have protections in place, such as address space layout randomization (ASLR) and stack canaries, which can make exploitation more challenging. Lastly, the issue primarily affects the ARM backend, limiting its impact to ARM-based systems, which may not be as prevalent as other architectures in certain deployment scenarios.",
  "acknowledgement": "",
  "name": "CVE-2024-31852",
  "document_distribution": "",
  "details": [
    "LLVM before 18.1.3 generates code in which the LR register can be overwritten without data being saved to the stack, and thus there can sometimes be an exploitable error in the flow of control. This affects the ARM backend and can be demonstrated with Clang. NOTE: the vendor perspective is \"we don't have strong objections for a CVE to be created ... It does seem that the likelihood of this miscompile enabling an exploit remains very low, because the miscompile resulting in this JOP gadget is such that the function is most likely to crash on most valid inputs to the function. So, if this function is covered by any testing, the miscompile is most likely to be discovered before the binary is shipped to production.\"",
    "A miscompile flaw was found in LLVM. In certain conditions, the LR register can be overwritten without data being saved to the stack, which can lead to an exploitable error in the compiled code. This affects the ARM backend and can be demonstrated with Clang."
  ],
  "references": [
    "https://www.cve.org/CVERecord?id=CVE-2024-31852\nhttps://nvd.nist.gov/vuln/detail/CVE-2024-31852"
  ]
}