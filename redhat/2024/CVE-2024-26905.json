{
  "affected_release": null,
  "package_state": [
    {
      "product_name": "Red Hat Enterprise Linux 6",
      "fix_state": "Out of support scope",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:6"
    },
    {
      "product_name": "Red Hat Enterprise Linux 7",
      "fix_state": "Out of support scope",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:7"
    },
    {
      "product_name": "Red Hat Enterprise Linux 7",
      "fix_state": "Out of support scope",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:7"
    },
    {
      "product_name": "Red Hat Enterprise Linux 8",
      "fix_state": "Under investigation",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:8"
    },
    {
      "product_name": "Red Hat Enterprise Linux 8",
      "fix_state": "Under investigation",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:8"
    },
    {
      "product_name": "Red Hat Enterprise Linux 9",
      "fix_state": "Under investigation",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:9"
    },
    {
      "product_name": "Red Hat Enterprise Linux 9",
      "fix_state": "Under investigation",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:9"
    }
  ],
  "threat_severity": "Moderate",
  "public_date": "2024-04-17T00:00:00Z",
  "bugzilla": {
    "description": "kernel: btrfs: fix data races when accessing the reserved amount of block reserves",
    "id": "2275637",
    "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2275637"
  },
  "cvss": {
    "cvss_base_score": "",
    "cvss_scoring_vector": "",
    "status": ""
  },
  "cvss3": {
    "cvss3_base_score": "5.5",
    "cvss3_scoring_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
    "status": "draft"
  },
  "iava": "",
  "cwe": "",
  "statement": "",
  "acknowledgement": "",
  "name": "CVE-2024-26905",
  "document_distribution": "",
  "details": [
    "In the Linux kernel, the following vulnerability has been resolved:\nbtrfs: fix data races when accessing the reserved amount of block reserves\nAt space_info.c we have several places where we access the -\u003ereserved\nfield of a block reserve without taking the block reserve's spinlock\nfirst, which makes KCSAN warn about a data race since that field is\nalways updated while holding the spinlock.\nThe reports from KCSAN are like the following:\n[117.193526] BUG: KCSAN: data-race in btrfs_block_rsv_release [btrfs] / need_preemptive_reclaim [btrfs]\n[117.195148] read to 0x000000017f587190 of 8 bytes by task 6303 on cpu 3:\n[117.195172]  need_preemptive_reclaim+0x222/0x2f0 [btrfs]\n[117.195992]  __reserve_bytes+0xbb0/0xdc8 [btrfs]\n[117.196807]  btrfs_reserve_metadata_bytes+0x4c/0x120 [btrfs]\n[117.197620]  btrfs_block_rsv_add+0x78/0xa8 [btrfs]\n[117.198434]  btrfs_delayed_update_inode+0x154/0x368 [btrfs]\n[117.199300]  btrfs_update_inode+0x108/0x1c8 [btrfs]\n[117.200122]  btrfs_dirty_inode+0xb4/0x140 [btrfs]\n[117.200937]  btrfs_update_time+0x8c/0xb0 [btrfs]\n[117.201754]  touch_atime+0x16c/0x1e0\n[117.201789]  filemap_read+0x674/0x728\n[117.201823]  btrfs_file_read_iter+0xf8/0x410 [btrfs]\n[117.202653]  vfs_read+0x2b6/0x498\n[117.203454]  ksys_read+0xa2/0x150\n[117.203473]  __s390x_sys_read+0x68/0x88\n[117.203495]  do_syscall+0x1c6/0x210\n[117.203517]  __do_syscall+0xc8/0xf0\n[117.203539]  system_call+0x70/0x98\n[117.203579] write to 0x000000017f587190 of 8 bytes by task 11 on cpu 0:\n[117.203604]  btrfs_block_rsv_release+0x2e8/0x578 [btrfs]\n[117.204432]  btrfs_delayed_inode_release_metadata+0x7c/0x1d0 [btrfs]\n[117.205259]  __btrfs_update_delayed_inode+0x37c/0x5e0 [btrfs]\n[117.206093]  btrfs_async_run_delayed_root+0x356/0x498 [btrfs]\n[117.206917]  btrfs_work_helper+0x160/0x7a0 [btrfs]\n[117.207738]  process_one_work+0x3b6/0x838\n[117.207768]  worker_thread+0x75e/0xb10\n[117.207797]  kthread+0x21a/0x230\n[117.207830]  __ret_from_fork+0x6c/0xb8\n[117.207861]  ret_from_fork+0xa/0x30\nSo add a helper to get the reserved amount of a block reserve while\nholding the lock. The value may be not be up to date anymore when used by\nneed_preemptive_reclaim() and btrfs_preempt_reclaim_metadata_space(), but\nthat's ok since the worst it can do is cause more reclaim work do be done\nsooner rather than later. Reading the field while holding the lock instead\nof using the data_race() annotation is used in order to prevent load\ntearing."
  ],
  "references": [
    "https://www.cve.org/CVERecord?id=CVE-2024-26905\nhttps://nvd.nist.gov/vuln/detail/CVE-2024-26905\nhttps://lore.kernel.org/linux-cve-announce/2024041746-CVE-2024-26905-69f0@gregkh/T"
  ]
}