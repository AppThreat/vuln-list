{
  "mitigation": "Mitigation for this issue is either not available or the currently available options don't meet the Red Hat Product Security criteria comprising ease of use and deployment, applicability to widespread installation base or stability.",
  "affected_release": [
    {
      "product_name": "Red Hat Enterprise Linux 8",
      "release_date": "2024-01-10T00:00:00Z",
      "advisory": "RHSA-2024:0157",
      "package": "dotnet7.0",
      "cpe": "cpe:/a:redhat:enterprise_linux:8"
    },
    {
      "product_name": "Red Hat Enterprise Linux 8",
      "release_date": "2024-01-10T00:00:00Z",
      "advisory": "RHSA-2024:0158",
      "package": "dotnet6.0",
      "cpe": "cpe:/a:redhat:enterprise_linux:8"
    },
    {
      "product_name": "Red Hat Enterprise Linux 8",
      "release_date": "2024-02-13T00:00:00Z",
      "advisory": "RHSA-2024:0806",
      "package": "dotnet7.0",
      "cpe": "cpe:/a:redhat:enterprise_linux:8"
    },
    {
      "product_name": "Red Hat Enterprise Linux 9",
      "release_date": "2024-01-10T00:00:00Z",
      "advisory": "RHSA-2024:0151",
      "package": "dotnet7.0",
      "cpe": "cpe:/a:redhat:enterprise_linux:9"
    },
    {
      "product_name": "Red Hat Enterprise Linux 9",
      "release_date": "2024-01-10T00:00:00Z",
      "advisory": "RHSA-2024:0156",
      "package": "dotnet6.0",
      "cpe": "cpe:/a:redhat:enterprise_linux:9"
    },
    {
      "product_name": "Red Hat Enterprise Linux 9",
      "release_date": "2024-02-13T00:00:00Z",
      "advisory": "RHSA-2024:0805",
      "package": "dotnet7.0",
      "cpe": "cpe:/a:redhat:enterprise_linux:9"
    }
  ],
  "package_state": [
    {
      "product_name": ".NET 6.0 on Red Hat Enterprise Linux",
      "fix_state": "Affected",
      "package_name": "rh-dotnet60-dotnet",
      "cpe": "cpe:/a:redhat:rhel_dotnet:6.0"
    },
    {
      "product_name": "Red Hat Integration Service Registry",
      "fix_state": "Affected",
      "package_name": "crypto-js",
      "cpe": "cpe:/a:redhat:service_registry:2"
    }
  ],
  "threat_severity": "Important",
  "public_date": "2023-10-25T00:00:00Z",
  "bugzilla": {
    "description": "crypto-js: PBKDF2 1,000 times weaker than specified in 1993 and 1.3M times weaker than current standard",
    "id": "2246369",
    "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2246369"
  },
  "cvss": {
    "cvss_base_score": "",
    "cvss_scoring_vector": "",
    "status": ""
  },
  "cvss3": {
    "cvss3_base_score": "9.1",
    "cvss3_scoring_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N",
    "status": "verified"
  },
  "iava": "",
  "cwe": "(CWE-328|CWE-916)",
  "statement": "The vulnerability in crypto-js's PBKDF2 implementation represents a important CVE issue due to its fundamental impact on cryptographic security. PBKDF2 is widely used for password protection and signature generation, making it a core component of many security-critical systems. However, the default settings in crypto-js result in significantly weaker security than industry standards, with the algorithm being 1,000 times weaker than originally specified in 1993 and millions of times weaker than current recommendations. This weakness stems from the use of the insecure SHA1 hash algorithm and the default of only one iteration, both of which greatly diminish the resistance against various attacks. Consequently, attackers can exploit this vulnerability to create identical cryptographic signatures, potentially gaining unauthorized access to sensitive information or compromising system integrity. Given the widespread use of crypto-js and the important role of PBKDF2 in cryptographic operations, addressing this vulnerability is paramount to safeguarding against security breaches and maintaining trust in digital systems.",
  "acknowledgement": "",
  "name": "CVE-2023-46233",
  "document_distribution": "",
  "details": [
    "crypto-js is a JavaScript library of crypto standards. Prior to version 4.2.0, crypto-js PBKDF2 is 1,000 times weaker than originally specified in 1993, and at least 1,300,000 times weaker than current industry standard. This is because it both defaults to SHA1, a cryptographic hash algorithm considered insecure since at least 2005, and defaults to one single iteration, a 'strength' or 'difficulty' value specified at 1,000 when specified in 1993. PBKDF2 relies on iteration count as a countermeasure to preimage and collision attacks. If used to protect passwords, the impact is high. If used to generate signatures, the impact is high. Version 4.2.0 contains a patch for this issue. As a workaround, configure crypto-js to use SHA256 with at least 250,000 iterations.",
    "A vulnerability was found in crypto-js in how PBKDF2 is 1,000 times weaker than originally specified in 1993 and at least 1,300,000 times weaker than the current industry standard. This issue is because both default to SHA1, a cryptographic hash algorithm considered insecure since at least 2005, and default to one single iteration, a 'strength' or 'difficulty' value specified at 1,000 when specified in 1993. PBKDF2 relies on the iteration count as a countermeasure to preimage and collision attacks."
  ],
  "references": [
    "https://www.cve.org/CVERecord?id=CVE-2023-46233\nhttps://nvd.nist.gov/vuln/detail/CVE-2023-46233\nhttps://github.com/brix/crypto-js/security/advisories/GHSA-xwcq-pm8m-c4vf"
  ]
}