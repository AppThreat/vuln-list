{
  "affected_release": null,
  "package_state": [
    {
      "product_name": "Red Hat Enterprise Linux 6",
      "fix_state": "Out of support scope",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:6"
    },
    {
      "product_name": "Red Hat Enterprise Linux 7",
      "fix_state": "Out of support scope",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:7"
    },
    {
      "product_name": "Red Hat Enterprise Linux 7",
      "fix_state": "Out of support scope",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:7"
    },
    {
      "product_name": "Red Hat Enterprise Linux 8",
      "fix_state": "Under investigation",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:8"
    },
    {
      "product_name": "Red Hat Enterprise Linux 8",
      "fix_state": "Under investigation",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:8"
    },
    {
      "product_name": "Red Hat Enterprise Linux 9",
      "fix_state": "Under investigation",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:9"
    },
    {
      "product_name": "Red Hat Enterprise Linux 9",
      "fix_state": "Under investigation",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:9"
    }
  ],
  "threat_severity": "Moderate",
  "public_date": "2024-03-01T00:00:00Z",
  "bugzilla": {
    "description": "kernel: ipc/mqueue, msg, sem: avoid relying on a stack reference past its expiry",
    "id": "2267513",
    "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2267513"
  },
  "cvss": {
    "cvss_base_score": "",
    "cvss_scoring_vector": "",
    "status": ""
  },
  "cvss3": {
    "cvss3_base_score": "5.5",
    "cvss3_scoring_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
    "status": "draft"
  },
  "iava": "",
  "cwe": "",
  "statement": "",
  "acknowledgement": "",
  "name": "CVE-2021-47069",
  "document_distribution": "",
  "details": [
    "In the Linux kernel, the following vulnerability has been resolved:\nipc/mqueue, msg, sem: avoid relying on a stack reference past its expiry\ndo_mq_timedreceive calls wq_sleep with a stack local address.  The\nsender (do_mq_timedsend) uses this address to later call pipelined_send.\nThis leads to a very hard to trigger race where a do_mq_timedreceive\ncall might return and leave do_mq_timedsend to rely on an invalid\naddress, causing the following crash:\nRIP: 0010:wake_q_add_safe+0x13/0x60\nCall Trace:\n__x64_sys_mq_timedsend+0x2a9/0x490\ndo_syscall_64+0x80/0x680\nentry_SYSCALL_64_after_hwframe+0x44/0xa9\nRIP: 0033:0x7f5928e40343\nThe race occurs as:\n1. do_mq_timedreceive calls wq_sleep with the address of `struct\next_wait_queue` on function stack (aliased as `ewq_addr` here) - it\nholds a valid `struct ext_wait_queue *` as long as the stack has not\nbeen overwritten.\n2. `ewq_addr` gets added to info-\u003ee_wait_q[RECV].list in wq_add, and\ndo_mq_timedsend receives it via wq_get_first_waiter(info, RECV) to call\n__pipelined_op.\n3. Sender calls __pipelined_op::smp_store_release(\u0026this-\u003estate,\nSTATE_READY).  Here is where the race window begins.  (`this` is\n`ewq_addr`.)\n4. If the receiver wakes up now in do_mq_timedreceive::wq_sleep, it\nwill see `state == STATE_READY` and break.\n5. do_mq_timedreceive returns, and `ewq_addr` is no longer guaranteed\nto be a `struct ext_wait_queue *` since it was on do_mq_timedreceive's\nstack.  (Although the address may not get overwritten until another\nfunction happens to touch it, which means it can persist around for an\nindefinite time.)\n6. do_mq_timedsend::__pipelined_op() still believes `ewq_addr` is a\n`struct ext_wait_queue *`, and uses it to find a task_struct to pass to\nthe wake_q_add_safe call.  In the lucky case where nothing has\noverwritten `ewq_addr` yet, `ewq_addr-\u003etask` is the right task_struct.\nIn the unlucky case, __pipelined_op::wake_q_add_safe gets handed a\nbogus address as the receiver's task_struct causing the crash.\ndo_mq_timedsend::__pipelined_op() should not dereference `this` after\nsetting STATE_READY, as the receiver counterpart is now free to return.\nChange __pipelined_op to call wake_q_add_safe on the receiver's\ntask_struct returned by get_task_struct, instead of dereferencing `this`\nwhich sits on the receiver's stack.\nAs Manfred pointed out, the race potentially also exists in\nipc/msg.c::expunge_all and ipc/sem.c::wake_up_sem_queue_prepare.  Fix\nthose in the same way."
  ],
  "references": [
    "https://www.cve.org/CVERecord?id=CVE-2021-47069\nhttps://nvd.nist.gov/vuln/detail/CVE-2021-47069\nhttps://lore.kernel.org/linux-cve-announce/2024030141-CVE-2021-47069-5797@gregkh/T/#u"
  ]
}