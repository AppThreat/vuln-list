{
  "affected_release": null,
  "package_state": [
    {
      "product_name": "Red Hat Enterprise Linux 6",
      "fix_state": "Out of support scope",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:6"
    },
    {
      "product_name": "Red Hat Enterprise Linux 7",
      "fix_state": "Out of support scope",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:7"
    },
    {
      "product_name": "Red Hat Enterprise Linux 7",
      "fix_state": "Out of support scope",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:7"
    },
    {
      "product_name": "Red Hat Enterprise Linux 8",
      "fix_state": "Not affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:8"
    },
    {
      "product_name": "Red Hat Enterprise Linux 8",
      "fix_state": "Not affected",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:8"
    },
    {
      "product_name": "Red Hat Enterprise Linux 9",
      "fix_state": "Not affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:9"
    },
    {
      "product_name": "Red Hat Enterprise Linux 9",
      "fix_state": "Not affected",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:9"
    }
  ],
  "threat_severity": "Moderate",
  "public_date": "2024-03-01T00:00:00Z",
  "bugzilla": {
    "description": "kernel: btrfs: fix removed dentries still existing after log is synced",
    "id": "2267370",
    "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2267370"
  },
  "cvss": {
    "cvss_base_score": "",
    "cvss_scoring_vector": "",
    "status": ""
  },
  "cvss3": {
    "cvss3_base_score": "5.5",
    "cvss3_scoring_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
    "status": "draft"
  },
  "iava": "",
  "cwe": "",
  "statement": "Red Hat Enterprise Linux 8 and 9 are not affected by this CVE as they do not include Btrfs filesystem support (CONFIG_BTRFS_FS is not set).",
  "acknowledgement": "",
  "name": "CVE-2021-47072",
  "document_distribution": "",
  "details": [
    "In the Linux kernel, the following vulnerability has been resolved:\nbtrfs: fix removed dentries still existing after log is synced\nWhen we move one inode from one directory to another and both the inode\nand its previous parent directory were logged before, we are not supposed\nto have the dentry for the old parent if we have a power failure after the\nlog is synced. Only the new dentry is supposed to exist.\nGenerally this works correctly, however there is a scenario where this is\nnot currently working, because the old parent of the file/directory that\nwas moved is not authoritative for a range that includes the dir index and\ndir item keys of the old dentry. This case is better explained with the\nfollowing example and reproducer:\n# The test requires a very specific layout of keys and items in the\n# fs/subvolume btree to trigger the bug. So we want to make sure that\n# on whatever platform we are, we have the same leaf/node size.\n#\n# Currently in btrfs the node/leaf size can not be smaller than the page\n# size (but it can be greater than the page size). So use the largest\n# supported node/leaf size (64K).\n$ mkfs.btrfs -f -n 65536 /dev/sdc\n$ mount /dev/sdc /mnt\n# \"testdir\" is inode 257.\n$ mkdir /mnt/testdir\n$ chmod 755 /mnt/testdir\n# Create several empty files to have the directory \"testdir\" with its\n# items spread over several leaves (7 in this case).\n$ for ((i = 1; i \u003c= 1200; i++)); do\necho -n \u003e /mnt/testdir/file$i\ndone\n# Create our test directory \"dira\", inode number 1458, which gets all\n# its items in leaf 7.\n#\n# The BTRFS_DIR_ITEM_KEY item for inode 257 (\"testdir\") that points to\n# the entry named \"dira\" is in leaf 2, while the BTRFS_DIR_INDEX_KEY\n# item that points to that entry is in leaf 3.\n#\n# For this particular filesystem node size (64K), file count and file\n# names, we endup with the directory entry items from inode 257 in\n# leaves 2 and 3, as previously mentioned - what matters for triggering\n# the bug exercised by this test case is that those items are not placed\n# in leaf 1, they must be placed in a leaf different from the one\n# containing the inode item for inode 257.\n#\n# The corresponding BTRFS_DIR_ITEM_KEY and BTRFS_DIR_INDEX_KEY items for\n# the parent inode (257) are the following:\n#\n#    item 460 key (257 DIR_ITEM 3724298081) itemoff 48344 itemsize 34\n#         location key (1458 INODE_ITEM 0) type DIR\n#         transid 6 data_len 0 name_len 4\n#         name: dira\n#\n# and:\n#\n#    item 771 key (257 DIR_INDEX 1202) itemoff 36673 itemsize 34\n#         location key (1458 INODE_ITEM 0) type DIR\n#         transid 6 data_len 0 name_len 4\n#         name: dira\n$ mkdir /mnt/testdir/dira\n# Make sure everything done so far is durably persisted.\n$ sync\n# Now do a change to inode 257 (\"testdir\") that does not result in\n# COWing leaves 2 and 3 - the leaves that contain the directory items\n# pointing to inode 1458 (directory \"dira\").\n#\n# Changing permissions, the owner/group, updating or adding a xattr,\n# etc, will not change (COW) leaves 2 and 3. So for the sake of\n# simplicity change the permissions of inode 257, which results in\n# updating its inode item and therefore change (COW) only leaf 1.\n$ chmod 700 /mnt/testdir\n# Now fsync directory inode 257.\n#\n# Since only the first leaf was changed/COWed, we log the inode item of\n# inode 257 and only the dentries found in the first leaf, all have a\n# key type of BTRFS_DIR_ITEM_KEY, and no keys of type\n# BTRFS_DIR_INDEX_KEY, because they sort after the former type and none\n# exist in the first leaf.\n#\n# We also log 3 items that represent ranges for dir items and dir\n# indexes for which the log is authoritative:\n#\n# 1) a key of type BTRFS_DIR_LOG_ITEM_KEY, which indicates the log is\n#    authoritative for all BTRFS_DIR_ITEM_KEY keys that have an offset\n#    in the range [0, 2285968570] (the offset here is th\n---truncated---"
  ],
  "references": [
    "https://www.cve.org/CVERecord?id=CVE-2021-47072\nhttps://nvd.nist.gov/vuln/detail/CVE-2021-47072\nhttps://lore.kernel.org/linux-cve-announce/2024030141-CVE-2021-47072-52d4@gregkh/T/#u"
  ]
}