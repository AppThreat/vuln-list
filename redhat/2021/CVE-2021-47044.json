{
  "affected_release": null,
  "package_state": [
    {
      "product_name": "Red Hat Enterprise Linux 6",
      "fix_state": "Out of support scope",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:6"
    },
    {
      "product_name": "Red Hat Enterprise Linux 7",
      "fix_state": "Out of support scope",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:7"
    },
    {
      "product_name": "Red Hat Enterprise Linux 7",
      "fix_state": "Out of support scope",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:7"
    },
    {
      "product_name": "Red Hat Enterprise Linux 8",
      "fix_state": "Affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:8"
    },
    {
      "product_name": "Red Hat Enterprise Linux 8",
      "fix_state": "Affected",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:8"
    },
    {
      "product_name": "Red Hat Enterprise Linux 9",
      "fix_state": "Not affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:9"
    },
    {
      "product_name": "Red Hat Enterprise Linux 9",
      "fix_state": "Affected",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:9"
    }
  ],
  "threat_severity": "Moderate",
  "public_date": "2024-02-28T00:00:00Z",
  "bugzilla": {
    "description": "kernel: sched/fair: Fix shift-out-of-bounds in load_balance()",
    "id": "2267012",
    "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2267012"
  },
  "cvss": {
    "cvss_base_score": "",
    "cvss_scoring_vector": "",
    "status": ""
  },
  "cvss3": {
    "cvss3_base_score": "5.5",
    "cvss3_scoring_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
    "status": "draft"
  },
  "iava": "",
  "cwe": "CWE-125",
  "statement": "",
  "acknowledgement": "",
  "name": "CVE-2021-47044",
  "document_distribution": "",
  "details": [
    "In the Linux kernel, the following vulnerability has been resolved:\nsched/fair: Fix shift-out-of-bounds in load_balance()\nSyzbot reported a handful of occurrences where an sd-\u003enr_balance_failed can\ngrow to much higher values than one would expect.\nA successful load_balance() resets it to 0; a failed one increments\nit. Once it gets to sd-\u003ecache_nice_tries + 3, this *should* trigger an\nactive balance, which will either set it to sd-\u003ecache_nice_tries+1 or reset\nit to 0. However, in case the to-be-active-balanced task is not allowed to\nrun on env-\u003edst_cpu, then the increment is done without any further\nmodification.\nThis could then be repeated ad nauseam, and would explain the absurdly high\nvalues reported by syzbot (86, 149). VincentG noted there is value in\nletting sd-\u003ecache_nice_tries grow, so the shift itself should be\nfixed. That means preventing:\n\"\"\"\nIf the value of the right operand is negative or is greater than or equal\nto the width of the promoted left operand, the behavior is undefined.\n\"\"\"\nThus we need to cap the shift exponent to\nBITS_PER_TYPE(typeof(lefthand)) - 1.\nI had a look around for other similar cases via coccinelle:\n@expr@\nposition pos;\nexpression E1;\nexpression E2;\n@@\n(\nE1 \u003e\u003e E2@pos\n|\nE1 \u003e\u003e E2@pos\n)\n@cst depends on expr@\nposition pos;\nexpression expr.E1;\nconstant cst;\n@@\n(\nE1 \u003e\u003e cst@pos\n|\nE1 \u003c\u003c cst@pos\n)\n@script:python depends on !cst@\npos \u003c\u003c expr.pos;\nexp \u003c\u003c expr.E2;\n@@\n# Dirty hack to ignore constexpr\nif exp.upper() != exp:\ncoccilib.report.print_report(pos[0], \"Possible UB shift here\")\nThe only other match in kernel/sched is rq_clock_thermal() which employs\nsched_thermal_decay_shift, and that exponent is already capped to 10, so\nthat one is fine."
  ],
  "references": [
    "https://www.cve.org/CVERecord?id=CVE-2021-47044\nhttps://nvd.nist.gov/vuln/detail/CVE-2021-47044\nhttps://lore.kernel.org/linux-cve-announce/2024022839-CVE-2021-47044-2e16@gregkh/T/#u"
  ]
}