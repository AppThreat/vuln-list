{
  "affected_release": null,
  "package_state": [
    {
      "product_name": "Red Hat Enterprise Linux 6",
      "fix_state": "Out of support scope",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:6"
    },
    {
      "product_name": "Red Hat Enterprise Linux 7",
      "fix_state": "Out of support scope",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:7"
    },
    {
      "product_name": "Red Hat Enterprise Linux 7",
      "fix_state": "Out of support scope",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:7"
    },
    {
      "product_name": "Red Hat Enterprise Linux 8",
      "fix_state": "Not affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:8"
    },
    {
      "product_name": "Red Hat Enterprise Linux 8",
      "fix_state": "Not affected",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:8"
    },
    {
      "product_name": "Red Hat Enterprise Linux 9",
      "fix_state": "Not affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:9"
    },
    {
      "product_name": "Red Hat Enterprise Linux 9",
      "fix_state": "Not affected",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:9"
    }
  ],
  "threat_severity": "Moderate",
  "public_date": "2024-02-27T00:00:00Z",
  "bugzilla": {
    "description": "kernel: sctp: use call_rcu to free endpoint",
    "id": "2266357",
    "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2266357"
  },
  "cvss": {
    "cvss_base_score": "",
    "cvss_scoring_vector": "",
    "status": ""
  },
  "cvss3": {
    "cvss3_base_score": "5.5",
    "cvss3_scoring_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
    "status": "draft"
  },
  "iava": "",
  "cwe": "CWE-416",
  "statement": "",
  "acknowledgement": "",
  "name": "CVE-2021-46929",
  "document_distribution": "",
  "details": [
    "In the Linux kernel, the following vulnerability has been resolved:\nsctp: use call_rcu to free endpoint\nThis patch is to delay the endpoint free by calling call_rcu() to fix\nanother use-after-free issue in sctp_sock_dump():\nBUG: KASAN: use-after-free in __lock_acquire+0x36d9/0x4c20\nCall Trace:\n__lock_acquire+0x36d9/0x4c20 kernel/locking/lockdep.c:3218\nlock_acquire+0x1ed/0x520 kernel/locking/lockdep.c:3844\n__raw_spin_lock_bh include/linux/spinlock_api_smp.h:135 [inline]\n_raw_spin_lock_bh+0x31/0x40 kernel/locking/spinlock.c:168\nspin_lock_bh include/linux/spinlock.h:334 [inline]\n__lock_sock+0x203/0x350 net/core/sock.c:2253\nlock_sock_nested+0xfe/0x120 net/core/sock.c:2774\nlock_sock include/net/sock.h:1492 [inline]\nsctp_sock_dump+0x122/0xb20 net/sctp/diag.c:324\nsctp_for_each_transport+0x2b5/0x370 net/sctp/socket.c:5091\nsctp_diag_dump+0x3ac/0x660 net/sctp/diag.c:527\n__inet_diag_dump+0xa8/0x140 net/ipv4/inet_diag.c:1049\ninet_diag_dump+0x9b/0x110 net/ipv4/inet_diag.c:1065\nnetlink_dump+0x606/0x1080 net/netlink/af_netlink.c:2244\n__netlink_dump_start+0x59a/0x7c0 net/netlink/af_netlink.c:2352\nnetlink_dump_start include/linux/netlink.h:216 [inline]\ninet_diag_handler_cmd+0x2ce/0x3f0 net/ipv4/inet_diag.c:1170\n__sock_diag_cmd net/core/sock_diag.c:232 [inline]\nsock_diag_rcv_msg+0x31d/0x410 net/core/sock_diag.c:263\nnetlink_rcv_skb+0x172/0x440 net/netlink/af_netlink.c:2477\nsock_diag_rcv+0x2a/0x40 net/core/sock_diag.c:274\nThis issue occurs when asoc is peeled off and the old sk is freed after\ngetting it by asoc-\u003ebase.sk and before calling lock_sock(sk).\nTo prevent the sk free, as a holder of the sk, ep should be alive when\ncalling lock_sock(). This patch uses call_rcu() and moves sock_put and\nep free into sctp_endpoint_destroy_rcu(), so that it's safe to try to\nhold the ep under rcu_read_lock in sctp_transport_traverse_process().\nIf sctp_endpoint_hold() returns true, it means this ep is still alive\nand we have held it and can continue to dump it; If it returns false,\nit means this ep is dead and can be freed after rcu_read_unlock, and\nwe should skip it.\nIn sctp_sock_dump(), after locking the sk, if this ep is different from\ntsp-\u003easoc-\u003eep, it means during this dumping, this asoc was peeled off\nbefore calling lock_sock(), and the sk should be skipped; If this ep is\nthe same with tsp-\u003easoc-\u003eep, it means no peeloff happens on this asoc,\nand due to lock_sock, no peeloff will happen either until release_sock.\nNote that delaying endpoint free won't delay the port release, as the\nport release happens in sctp_endpoint_destroy() before calling call_rcu().\nAlso, freeing endpoint by call_rcu() makes it safe to access the sk by\nasoc-\u003ebase.sk in sctp_assocs_seq_show() and sctp_rcv().\nThanks Jones to bring this issue up.\nv1-\u003ev2:\n- improve the changelog.\n- add kfree(ep) into sctp_endpoint_destroy_rcu(), as Jakub noticed."
  ],
  "references": [
    "https://www.cve.org/CVERecord?id=CVE-2021-46929\nhttps://nvd.nist.gov/vuln/detail/CVE-2021-46929\nhttps://lore.kernel.org/linux-cve-announce/2024022749-CVE-2021-46929-9369@gregkh/T/#u"
  ]
}